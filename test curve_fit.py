import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
import QubitSpectrumFunc as qsf


#
# def func(x, a, b, c):
#     return a * np.exp(-b * x) + c


def rabi_curve(t, A, T1, B, Tpi, phi0):
    r = A * np.exp(- t / T1) * np.cos(t / Tpi * np.pi + phi0) + B
    return r


# xdata = np.linspace(1, 1000, 30)
xdata = np.array([1., 35.448277, 69.89655, 104.344826, 138.7931,
                  173.24138, 207.68965, 242.13792, 276.5862, 311.0345,
                  345.48276, 379.93103, 414.3793, 448.82758, 483.27585,
                  517.7241, 552.1724, 586.62067, 621.069, 655.5172,
                  689.9655, 724.4138, 758.86206, 793.31036, 827.7586,
                  862.2069, 896.65515, 931.10345, 965.5517, 1000.])
# y = func(xdata, 0.1, 1.3e-2, 0.7)
# np.random.seed(1729)
# y_noise = 0.002 * np.random.normal(size=xdata.size)
# ydata = y + y_noise
ydata = np.array([0.86720973, 0.8640993, 0.8589928, 0.8342609, 0.81768245,
                  0.8096433, 0.80685985, 0.7855963, 0.78471303, 0.77087367,
                  0.74761707, 0.7764057, 0.7564062, 0.7773574, 0.77269214,
                  0.79580265, 0.7983447, 0.8086077, 0.8528278, 0.85440236,
                  0.8342635, 0.84251016, 0.8500313, 0.84004325, 0.84596086,
                  0.8117049, 0.8013138, 0.77621347, 0.78069526, 0.7641469])
# bounds = (
#     (-2, 0, -1),
#     (2, 1, 1)
# )

bounds = ([3.088, 0, 0, 100.0, 0.5, -0.5, -1], [4.1099000320000005, 0.02, 1, np.inf, 1.5, 0.5, 1])
# guess = [0.1, 1e-2, 0.4]
guess = [4.0958000640000005, 0.005, 0.7, 400000.0, 1.05, 0, 0.3]
[f0_guess, gamma_f_guess, P0_guess, A_guess, amp_cor_re_guess, amp_cor_im_guess, P0_im_guess] = guess
p = -20

OneFreqUniqTrunc = np.array(
    [4.088, 4.088100096000001, 4.0881999360000005, 4.088300032, 4.088399872, 4.088499968, 4.088600064, 4.088699904,
     4.0888, 4.088900096000001, 4.0889999360000004, 4.089100032, 4.089200128, 4.089299968000001, 4.089400064,
     4.089499904, 4.0896, 4.0897000960000005, 4.089799936, 4.089900032, 4.089999872, 4.0900999680000005, 4.090200064,
     4.090299904, 4.0904, 4.090500096, 4.090599936, 4.090700032, 4.090800128000001, 4.090899968, 4.091000064,
     4.091099904, 4.091200000000001, 4.091300096, 4.091399936, 4.091500032, 4.091599872000001, 4.091699968, 4.091800064,
     4.091899904, 4.0920000000000005, 4.092100096, 4.092199936, 4.092300032000001, 4.092400128, 4.092499968,
     4.092600064, 4.092699904, 4.0928, 4.092900096, 4.092999936, 4.093100032000001, 4.0931998720000005, 4.093299968,
     4.093400064, 4.093499904000001, 4.0936, 4.093700096, 4.093799936, 4.0939000320000005, 4.094000128, 4.094099968,
     4.094200064000001, 4.0942999040000005, 4.0944, 4.094500096, 4.094599936, 4.094700032, 4.094799872, 4.094899968,
     4.095000064000001, 4.0950999040000005, 4.0952, 4.095300096, 4.095399936000001, 4.095500032, 4.095600128,
     4.095699968, 4.0958000640000005, 4.095899904, 4.096, 4.096100096000001, 4.0961999360000005, 4.096300032,
     4.096399872, 4.096499968, 4.096600064, 4.096699904, 4.0968, 4.096900096000001, 4.0969999360000005, 4.097100032,
     4.097200128, 4.097299968000001, 4.097400064, 4.097499904, 4.0976, 4.0977000960000005, 4.097799936, 4.097900032,
     4.097999872, 4.0980999680000005, 4.098200064, 4.098299904, 4.0984, 4.098500096, 4.098599936, 4.098700032,
     4.098800128000001, 4.0988999680000004, 4.099000064, 4.099099904, 4.099200000000001, 4.099300096, 4.099399936,
     4.099500032, 4.099599872000001, 4.099699968, 4.099800064, 4.099899904, 4.1000000000000005, 4.100100096,
     4.100199936, 4.100300032, 4.100400128, 4.100499968, 4.100600064, 4.100699904, 4.1008000000000004, 4.100900096,
     4.100999936, 4.101100032000001, 4.1011998720000005, 4.101299968, 4.101400064, 4.101499904000001, 4.1016,
     4.101700096, 4.101799936, 4.1019000320000005, 4.102000128, 4.102099968, 4.102200064, 4.1022999040000006, 4.1024,
     4.102500096, 4.102599936, 4.102700032, 4.102799872, 4.102899968, 4.103000064000001, 4.1030999040000005, 4.1032,
     4.103300096, 4.103399936000001, 4.103500032, 4.103600128, 4.103699968, 4.1038000640000005, 4.103899904, 4.104,
     4.104100096000001, 4.1041999360000005, 4.104300032, 4.104399872, 4.104499968, 4.104600064, 4.104699904, 4.1048,
     4.104900096000001, 4.1049999360000005, 4.105100032, 4.105200128, 4.105299968000001, 4.105400064, 4.105499904,
     4.1056, 4.1057000960000005, 4.105799936, 4.105900032, 4.105999872, 4.1060999680000005, 4.106200064, 4.106299904,
     4.1064, 4.106500096, 4.106599936, 4.106700032, 4.106800128000001, 4.1068999680000005, 4.107000064, 4.107099904,
     4.107200000000001, 4.107300096, 4.107399936, 4.107500032, 4.107599872000001, 4.107699968, 4.107800064, 4.107899904,
     4.1080000000000005, 4.108100096, 4.108199936, 4.108300032, 4.108400128, 4.108499968, 4.108600064, 4.108699904,
     4.1088000000000005, 4.108900096, 4.108999936, 4.109100032000001, 4.1091998720000005, 4.109299968, 4.109400064,
     4.109499904000001, 4.1096, 4.109700096, 4.109799936, 4.1099000320000005]
)
RComplexTrunc = np.array([(1.030046937249128-0.1733933575104759j), (1.0648873133595362-0.18747766734096932j), (1.0991834013328716-0.16347967100666272j), (1.0583374997561843-0.1541774222740067j), (1.0488735346480222-0.15267485744715487j), (1.068647654072638-0.1483308014459627j), (1.0787833028171014-0.13382536501960474j), (1.046405624645052-0.10634422017854753j), (1.0269927741747735-0.13066799728446643j), (1.0380845987061218-0.1550801643284629j), (1.0343785781906563-0.13897853408929364j), (1.0387976607019136-0.15148339041776257j), (1.037307914124657-0.12340011676594909j), (1.0291824886804914-0.14856938819426865j), (1.0325123132639447-0.1550037658043468j), (1.0310504543729502-0.1391096755080407j), (1.0499699984591409-0.13938894817289227j), (1.0616915108222102-0.14534024170495277j), (1.0434416092223164-0.14695718265599392j), (1.0629013211804341-0.13060352514878582j), (1.0251262751282186-0.11779376902463089j), (1.033502039878993-0.13343006707630103j), (1.023712845897657-0.13923324595967573j), (1.0251767368174158-0.13375250540641268j), (1.049344520821157-0.1408652151960125j), (1.00787753459695-0.15775246625415645j), (1.0128685751003672-0.1370445416641837j), (0.9946041034060291-0.1382891081834928j), (1.0054399111262076-0.12510242551999054j), (1.013869036414959-0.14187267875453283j), (1.0040411542590832-0.14224112670646588j), (1.0081223787143765-0.12653229475007077j), (0.985954561955989-0.135622377114301j), (0.9738275402096441-0.12073119322525774j), (0.9958491746523849-0.13770666631699896j), (0.9787428808152628-0.14200454948031704j), (0.9903194066997763-0.11625197219192618j), (0.9541524658832432-0.12292444722437586j), (0.9575501108350021-0.14816675822498357j), (0.9520327443043668-0.12993179907504215j), (0.9488944562982995-0.11660591871339246j), (0.9594665665141309-0.12958638960725632j), (0.9518311812470488-0.1453397817346646j), (0.943446985805506-0.1256569987328779j), (0.9608293666099478-0.11073138584199443j), (0.9599956364686162-0.12541930541684698j), (0.9421975773556897-0.13608070416408938j), (0.936903685454584-0.12922080023219154j), (0.9351208130605427-0.11704936434195022j), (0.9199397131046311-0.12318019959915291j), (0.924536486282168-0.09990722772248134j), (0.9022961862485116-0.1351026659512021j), (0.9178255302125921-0.11554148241787708j), (0.9187772838411854-0.10657775399537821j), (0.8968475374905666-0.1149773340448089j), (0.892345149592799-0.1021414096261612j), (0.8840947159464818-0.10310386296653914j), (0.8792059313531811-0.08756576616848322j), (0.8720197606172778-0.09464561587752042j), (0.8665183970494731-0.08750927450547424j), (0.845799023388679-0.0781161100221496j), (0.850977107413942-0.07161509151784134j), (0.8560747024918217-0.07943768065682444j), (0.8323171335088303-0.07957892636380008j), (0.8289704656260293-0.07074281401272649j), (0.8359197643989783-0.05907080271833588j), (0.8212018889210055-0.04528617479120467j), (0.8286407472587348-0.06022218566022561j), (0.8071122482107065-0.03941556430450018j), (0.7902133592904744-0.029272605674456408j), (0.7845292308067429-0.02662074325945646j), (0.7988548731998337-0.02562803277139244j), (0.7798127147780152-0.023078532719471537j), (0.7936510630106388-0.011984250932610754j), (0.768027112307835-0.010028287311113193j), (0.7690003354853114+0.021109111418579643j), (0.7787576465234445+0.006696284204237222j), (0.7659688425944807+0.027996941280171578j), (0.738754304997524+0.02982631555847693j), (0.7543292410646634+0.030995211263077572j), (0.7619541032714737+0.0631120610097173j), (0.7449567710823101+0.0678528874147674j), (0.7466570830288041+0.06285825299170461j), (0.7542337834035981+0.08148323211579682j), (0.7458030676863412+0.07880619741886814j), (0.7304781252481016+0.09903461260546281j), (0.7424957585994225+0.10263467497100424j), (0.7336362514818493+0.12079023025220419j), (0.7247185166721946+0.13722831681438427j), (0.7512774524705524+0.12912623041560103j), (0.7436339675920629+0.14677881342126892j), (0.7350095146411038+0.1432743138754744j), (0.7255110448002478+0.1507777863631309j), (0.7436251441903062+0.15135341145612677j), (0.7489171805959671+0.17077010731796177j), (0.7538998215587691+0.17640495543118728j), (0.7419185898557557+0.18993958582280324j), (0.7526921156821449+0.20964024177162624j), (0.7381575819072095+0.20561739670260806j), (0.7573787107538997+0.22116920725474026j), (0.76447484427188+0.22600025430139462j), (0.7576130493014707+0.24436654103634392j), (0.7704637047464574+0.2585615699174698j), (0.7688652706879099+0.25102189986589774j), (0.7752812494365342+0.2637700422963522j), (0.7691635046689428+0.25026827998643403j), (0.7911967063477812+0.26689541104187126j), (0.7879428641425504+0.2716777021206983j), (0.7757357880845035+0.2673222982671284j), (0.7862160713399313+0.27137311406472964j), (0.7736697223211946+0.27070061636412396j), (0.7685705604912081+0.2767413800959247j), (0.7954066011249942+0.29305042588211844j), (0.8019226777307334+0.2703746963532019j), (0.7953894599215211+0.2880291374967161j), (0.7939876824239901+0.3025721043608992j), (0.8144895942666434+0.29155835730431023j), (0.7765046197894496+0.3062276442077979j), (0.8219278791607907+0.3098945012865938j), (0.8338060256056263+0.29384389259508426j), (0.8305800491068103+0.27740888961497845j), (0.8383784742442262+0.28624464673069006j), (0.850649381814879+0.2864967224356858j), (0.8325826234673565+0.3281731002486144j), (0.8360221292667245+0.32008329567413196j), (0.8306788648839195+0.30710677914734313j), (0.8293736953539602+0.3010628829882359j), (0.8445963347855815+0.30435978515811585j), (0.8318850208720371+0.30668855240977877j), (0.8249013144197757+0.3201827990873796j), (0.815606401964154+0.30510382399720903j), (0.8248134426866582+0.3018226735651144j), (0.8331030454658496+0.3093101829126977j), (0.8375582564280002+0.2972303835588365j), (0.8647248003149777+0.29663740800652283j), (0.8418756663315867+0.2728374995754076j), (0.822432035630616+0.29420682469012166j), (0.8557245772919638+0.30044109951958753j), (0.8514095526045803+0.28856751250397705j), (0.8498726543590401+0.2821113341026834j), (0.8483676019890031+0.2766828684386574j), (0.8429967944210105+0.27369339098559214j), (0.8813026498965825+0.2826823287279167j), (0.8461664155000649+0.27176762435273477j), (0.8677379458780021+0.23818584563863213j), (0.8755801089717552+0.29305024604690283j), (0.8716819639852087+0.294398908720539j), (0.8575457801365685+0.2716660793619107j), (0.8853098088072302+0.26537018304899596j), (0.8690298731916438+0.2686841531424537j), (0.8544520477391968+0.24533999258966935j), (0.862475584071019+0.2629637949713791j), (0.8961419244978408+0.25271673888839097j), (0.8963624995434102+0.27430877541661924j), (0.8936848487958584+0.23408149946393073j), (0.9020343524627841+0.25000160113826897j), (0.9120794107929189+0.24687962925889997j), (0.8818079687412913+0.24417855602676491j), (0.8839743218173138+0.24356407728503165j), (0.8947240936000697+0.24466561244822363j), (0.8794308552462157+0.23341823510879836j), (0.9016377781735143+0.2561061546840211j), (0.8899156418349025+0.2270949995889294j), (0.9085556597509561+0.2669164349821276j), (0.9189673103911891+0.25888165377852335j), (0.9267095920868208+0.22568537540103184j), (0.9261691331234267+0.23131723717026142j), (0.9177034186916179+0.22705952722587697j), (0.9081189787102527+0.23465219154532577j), (0.9214730642098927+0.2030697567418811j), (0.9248314847461043+0.21369762331805275j), (0.9356492604849445+0.23045309918122855j), (0.9268112522519762+0.22482470773699031j), (0.9362893988056931+0.21669342734605532j), (0.9368463038391563+0.22057868109713155j), (0.9495870631370287+0.22724806548204124j), (0.9425469123955621+0.2247418940588568j), (0.9313802239822692+0.21962488454489024j), (0.9334427937748926+0.20512063922611076j), (0.9216446189326142+0.2007550776187789j), (0.9189428905759078+0.19353717266530698j), (0.9437405530166674+0.20381256219232513j), (0.9439946670265426+0.19846479794099353j), (0.9527977334858638+0.19477699683633248j), (0.9468315550461973+0.22818907788315906j), (0.9617880426696727+0.2230868078941433j), (0.9600926193791687+0.19970645024061306j), (0.9621894379490967+0.21588323681397983j), (0.9546562802928908+0.1977020872418341j), (0.9427468079391245+0.1921925532608233j), (0.9462033344897376+0.18062481299264294j), (0.9242172177060135+0.20588370789942875j), (0.9379153719650833+0.2011288374719384j), (0.9551738068456244+0.21177675292149406j), (0.9509195320144874+0.20416553914764254j), (0.9644610589943426+0.20224387108146985j), (0.943894577627019+0.20034556442768126j), (0.9587871264013996+0.2027435051095086j), (0.9649620844156186+0.18325749811513334j), (0.9559575458126659+0.16416326158990907j), (0.944709624093291+0.16891651537756958j), (0.9398550523622208+0.18044414343956203j), (0.9790222632029304+0.19977055728772553j), (0.9541310704740144+0.1746614451889183j), (0.9496225355856504+0.19330425538450566j), (0.9543080671533704+0.18202526847507242j), (0.9617289395121723+0.19141233326149312j), (0.9663003278389926+0.2037125495754268j), (0.9513118340131476+0.20533577593839128j), (0.956188889197525+0.17431624407028726j), (0.9263449256744483+0.18461733985558962j), (0.9357900348636154+0.1855876150610335j), (0.9679769827117326+0.1782278912483786j), (0.9779169082378575+0.17659040689985156j), (0.9835977069173524+0.15870306879646018j), (0.9790749108650137+0.19012579724971526j), (0.9843365622560251+0.17848361283503342j), (0.9746988845288298+0.1713705087646305j), (0.9896137858840308+0.18026926183577857j), (0.9699530627508721+0.173393357510476j)]
                        )
opt, cov, LargerFreqRange, FittedComplex = qsf.fitReflectionCircles(OneFreqUniqTrunc, np.array([p]),
                                                                    RComplexTrunc,
                                                                    guess, bounds)

UnfittedComplex = qsf.reflection_for_fit([LargerFreqRange, np.array([1e-3 * 10 ** (p / 10)])],
                                                     f0_guess, gamma_f_guess, P0_guess, A_guess,
                                                     amp_cor_re_guess, amp_cor_im_guess, P0_im_guess)
split_ind = int(len(UnfittedComplex) / 2)
UnfittedComplex = UnfittedComplex[:split_ind] + 1j * UnfittedComplex[split_ind:]
StartFreq = OneFreqUniqTrunc.min()
EndFreq = OneFreqUniqTrunc.max()
# print(pcov)
# print('---------------------------')
print(opt)
fig, ax = plt.subplots()
plt.plot(OneFreqUniqTrunc, np.real(RComplexTrunc), 'b-', label='data')
plt.plot(LargerFreqRange, np.real(FittedComplex), 'g--')
plt.plot(LargerFreqRange, np.real(UnfittedComplex), 'r--')
plt.xlabel('x')
plt.ylabel('y')
plt.xlim(StartFreq, EndFreq)
plt.legend()

fig, ax = plt.subplots()
plt.plot(OneFreqUniqTrunc, np.imag(RComplexTrunc), 'b-', label='data')
plt.plot(LargerFreqRange, np.imag(FittedComplex), 'g--')
plt.plot(LargerFreqRange, np.imag(UnfittedComplex), 'r--')
plt.xlabel('x')
plt.ylabel('y')
plt.xlim(StartFreq, EndFreq)
plt.legend()

fig, ax = plt.subplots()
plt.plot(np.real(RComplexTrunc), np.imag(RComplexTrunc), 'b-', label='data')
plt.plot(np.real(FittedComplex), np.imag(FittedComplex), 'g--')
plt.plot(np.real(UnfittedComplex), np.imag(UnfittedComplex), 'r--')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.show()
